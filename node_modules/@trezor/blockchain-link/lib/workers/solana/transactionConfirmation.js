"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.confirmTransaction = void 0;
const tslib_1 = require("tslib");
const COMMITMENT = 'finalized';
const tryConfirmBySignatureStatus = (connection, signature, lastValidBlockHeight, abortSignal) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const getCurrentBlockHeight = () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        try {
            return yield connection.getBlockHeight('finalized');
        }
        catch (_) {
            return -1;
        }
    });
    let currentBlockHeight = yield getCurrentBlockHeight();
    while (currentBlockHeight <= lastValidBlockHeight) {
        const signatureStatus = yield connection.getSignatureStatus(signature);
        if (signatureStatus.value != null &&
            signatureStatus.value.confirmationStatus === COMMITMENT) {
            return signature;
        }
        yield new Promise(resolve => setTimeout(resolve, 5000));
        if (abortSignal.aborted) {
            return signature;
        }
        currentBlockHeight = yield getCurrentBlockHeight();
    }
    throw new Error(`TransactionExpiredBlockheightExceededError: Signature ${signature} has expired: block height exceeded.`);
});
const tryConfirmBySignatureSubscription = (connection, signature) => {
    let subscriptionId;
    const confirmationPromise = new Promise((resolve, reject) => {
        subscriptionId = connection.onSignature(signature, result => {
            if (result.err != null) {
                reject(result.err);
            }
            resolve(signature);
        }, COMMITMENT);
    });
    return { subscriptionId, confirmationPromise };
};
const confirmTransaction = (api, signature, lastValidBlockHeight) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const { subscriptionId, confirmationPromise: signatureSubscriptionConfirmationPromise } = tryConfirmBySignatureSubscription(api, signature);
    const abortController = new AbortController();
    const signatureStatusConfirmationPromise = tryConfirmBySignatureStatus(api, signature, lastValidBlockHeight, abortController.signal);
    yield Promise.race([
        signatureSubscriptionConfirmationPromise,
        signatureStatusConfirmationPromise,
    ]);
    abortController.abort();
    if (subscriptionId != null) {
        api.removeSignatureListener(subscriptionId);
    }
    return signature;
});
exports.confirmTransaction = confirmTransaction;
//# sourceMappingURL=transactionConfirmation.js.map