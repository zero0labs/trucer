import { PROTO } from '../../constants';
import { Static } from '@trezor/schema-utils';
export type Path = number[];
export declare const Path: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TNumber>;
export type CollateralInputWithPath = {
    collateralInput: PROTO.CardanoTxCollateralInput;
    path?: Path;
};
export type InputWithPath = Static<typeof InputWithPath>;
export declare const InputWithPath: import("@sinclair/typebox").TObject<{
    input: import("@sinclair/typebox").TObject<{
        prev_hash: import("@sinclair/typebox").TString;
        prev_index: import("@sinclair/typebox").TNumber;
    }>;
    path: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TArray<import("@sinclair/typebox").TNumber>>;
}>;
export type InputWithPathParam = Static<typeof InputWithPath>;
export declare const InputWithPathParam: import("@sinclair/typebox").TObject<{
    path: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TString, import("@sinclair/typebox").TArray<import("@sinclair/typebox").TNumber>]>>;
    prev_hash: import("@sinclair/typebox").TString;
    prev_index: import("@sinclair/typebox").TNumber;
}>;
export declare const transformInput: (input: unknown) => InputWithPath;
export declare const transformCollateralInput: (collateralInput: unknown) => CollateralInputWithPath;
export declare const transformReferenceInput: (referenceInput: unknown) => PROTO.CardanoTxReferenceInput;
//# sourceMappingURL=cardanoInputs.d.ts.map