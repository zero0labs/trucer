"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AbstractMethod_1 = require("../core/AbstractMethod");
const constants_1 = require("../constants");
const events_1 = require("../events");
const schema_utils_1 = require("@trezor/schema-utils");
const changeLanguage_1 = require("../types/api/changeLanguage");
const assets_1 = require("../utils/assets");
class ChangeLanguage extends AbstractMethod_1.AbstractMethod {
    init() {
        this.allowDeviceMode = [events_1.UI.INITIALIZE, events_1.UI.SEEDLESS];
        this.useEmptyPassphrase = true;
        this.requiredPermissions = ['management'];
        this.useDeviceState = false;
        const { payload } = this;
        (0, schema_utils_1.Assert)(changeLanguage_1.ChangeLanguage, payload);
        if (payload.binary) {
            this.params = {
                binary: payload.binary,
            };
        }
        else {
            this.params = {
                language: payload.language,
                baseUrl: payload.baseUrl || 'https://data.trezor.io',
            };
        }
    }
    async confirmation() {
        await this.getPopupPromise().promise;
        const uiPromise = this.createUiPromise(events_1.UI.RECEIVE_CONFIRMATION);
        this.postMessage((0, events_1.createUiMessage)(events_1.UI.REQUEST_CONFIRMATION, {
            view: 'device-management',
            customConfirmButton: {
                className: 'confirm',
                label: 'Proceed',
            },
            label: 'Do you want to change language?',
        }));
        const uiResp = await uiPromise.promise;
        return uiResp.payload;
    }
    async uploadTranslationData(payload) {
        if (!this.device.commands) {
            throw constants_1.ERRORS.TypedError('Runtime', 'uploadTranslationData: device.commands is not set');
        }
        if (payload === null) {
            const response = await this.device.commands.typedCall('ChangeLanguage', ['Success'], { data_length: 0 });
            return response.message;
        }
        const length = payload.byteLength;
        let response = await this.device.commands.typedCall('ChangeLanguage', ['TranslationDataRequest', 'Success'], { data_length: length });
        while (response.type !== 'Success') {
            const start = response.message.data_offset;
            const end = response.message.data_offset + response.message.data_length;
            const chunk = payload.slice(start, end);
            response = await this.device.commands.typedCall('TranslationDataAck', ['TranslationDataRequest', 'Success'], {
                data_chunk: Buffer.from(chunk).toString('hex'),
            });
        }
        return response.message;
    }
    async run() {
        const { language, binary, baseUrl } = this.params;
        if (language === 'en-US') {
            return this.uploadTranslationData(null);
        }
        if (binary) {
            return this.uploadTranslationData(binary);
        }
        const version = this.device.getVersion().join('.');
        const model = this.device.features.internal_model;
        const url = `${baseUrl}/firmware/translations/${model.toLowerCase()}/translation-${model.toUpperCase()}-${language}-${version}.bin`;
        const downloadedBinary = await (0, assets_1.httpRequest)(url, 'binary');
        return this.uploadTranslationData(downloadedBinary);
    }
}
exports.default = ChangeLanguage;
//# sourceMappingURL=changeLanguage.js.map