import { AbstractMethod } from '../../../core/AbstractMethod';
import { EthereumSignTypedDataTypes, EthereumSignTypedData as EthereumSignTypedDataParams, EthereumSignTypedHash as EthereumSignTypedHashParams } from '../../../types/api/ethereum';
import { EthereumNetworkInfo } from '../../../types';
import { MessagesSchema } from '@trezor/protobuf';
type Params = (Omit<EthereumSignTypedDataParams<EthereumSignTypedDataTypes>, 'path'> | Omit<EthereumSignTypedHashParams<EthereumSignTypedDataTypes>, 'path'>) & {
    address_n: number[];
    network?: EthereumNetworkInfo;
    definitions?: MessagesSchema.EthereumDefinitions;
};
declare const Params: import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TObject<{
    data: import("@sinclair/typebox").TObject<{
        types: import("@sinclair/typebox").TObject<{
            EIP712Domain: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TObject<{
                name: import("@sinclair/typebox").TString;
                type: import("@sinclair/typebox").TString;
            }>>;
        }>;
        primaryType: import("@sinclair/typebox").TString;
        domain: import("@sinclair/typebox").TObject<{
            name: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
            version: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
            chainId: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TNumber, import("@sinclair/typebox").TBigInt, import("@sinclair/typebox").TString]>>;
            verifyingContract: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
            salt: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnion<[import("@trezor/schema-utils/lib/custom-types/array-buffer").TArrayBuffer, import("@sinclair/typebox").TString]>>;
        }>;
        message: import("@sinclair/typebox").TObject<{}>;
    }>;
    metamask_v4_compat: import("@sinclair/typebox").TBoolean;
    domain_separator_hash: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUndefined>;
    message_hash: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUndefined>;
}>, import("@sinclair/typebox").TObject<{
    data: import("@sinclair/typebox").TObject<{
        types: import("@sinclair/typebox").TObject<{
            EIP712Domain: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TObject<{
                name: import("@sinclair/typebox").TString;
                type: import("@sinclair/typebox").TString;
            }>>;
        }>;
        primaryType: import("@sinclair/typebox").TString;
        domain: import("@sinclair/typebox").TObject<{
            name: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
            version: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
            chainId: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TNumber, import("@sinclair/typebox").TBigInt, import("@sinclair/typebox").TString]>>;
            verifyingContract: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
            salt: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnion<[import("@trezor/schema-utils/lib/custom-types/array-buffer").TArrayBuffer, import("@sinclair/typebox").TString]>>;
        }>;
        message: import("@sinclair/typebox").TObject<{}>;
    }>;
    metamask_v4_compat: import("@sinclair/typebox").TBoolean;
    domain_separator_hash: import("@sinclair/typebox").TString;
    message_hash: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
}>]>, import("@sinclair/typebox").TObject<{
    address_n: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TNumber>;
    network: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TObject<{
        label: import("@sinclair/typebox").TString;
        name: import("@sinclair/typebox").TString;
        shortcut: import("@sinclair/typebox").TString;
        slip44: import("@sinclair/typebox").TNumber;
        support: import("@sinclair/typebox").TObject<{
            connect: import("@sinclair/typebox").TBoolean;
            T1B1: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TString, import("@sinclair/typebox").TLiteral<false>]>;
            T2T1: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TString, import("@sinclair/typebox").TLiteral<false>]>;
            T2B1: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TString, import("@sinclair/typebox").TLiteral<false>]>;
        }>;
        decimals: import("@sinclair/typebox").TNumber;
        blockchainLink: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{
            type: import("@sinclair/typebox").TString;
            url: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
        }>>;
        blockTime: import("@sinclair/typebox").TNumber;
        minFee: import("@sinclair/typebox").TNumber;
        maxFee: import("@sinclair/typebox").TNumber;
        defaultFees: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TObject<{
            label: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TLiteral<"high">, import("@sinclair/typebox").TLiteral<"normal">, import("@sinclair/typebox").TLiteral<"economy">, import("@sinclair/typebox").TLiteral<"low">, import("@sinclair/typebox").TLiteral<"custom">]>;
            feePerUnit: import("@sinclair/typebox").TString;
            blocks: import("@sinclair/typebox").TNumber;
            feeLimit: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
            feePerTx: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        }>>;
    }>, import("@sinclair/typebox").TObject<{
        type: import("@sinclair/typebox").TLiteral<"ethereum">;
        chainId: import("@sinclair/typebox").TNumber;
        network: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUndefined>;
    }>]>>;
    definitions: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{
        encoded_network: import("@sinclair/typebox").TOptional<import("@trezor/schema-utils/lib/custom-types/array-buffer").TArrayBuffer>;
        encoded_token: import("@sinclair/typebox").TOptional<import("@trezor/schema-utils/lib/custom-types/array-buffer").TArrayBuffer>;
    }>>;
}>]>;
export default class EthereumSignTypedData extends AbstractMethod<'ethereumSignTypedData', Params> {
    init(): void;
    initAsync(): Promise<void>;
    get info(): string;
    run(): Promise<{
        address: string;
        signature: string;
    }>;
}
export {};
//# sourceMappingURL=ethereumSignTypedData.d.ts.map