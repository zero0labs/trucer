"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const crypto_1 = require("crypto");
const AbstractMethod_1 = require("../core/AbstractMethod");
const constants_1 = require("../constants");
const events_1 = require("../events");
const firmware_1 = require("./firmware");
const firmwareInfo_1 = require("../data/firmwareInfo");
const schema_utils_1 = require("@trezor/schema-utils");
const firmwareUpdate_1 = require("../types/api/firmwareUpdate");
class FirmwareUpdate extends AbstractMethod_1.AbstractMethod {
    init() {
        this.useEmptyPassphrase = true;
        this.requiredPermissions = ['management'];
        this.allowDeviceMode = [events_1.UI.BOOTLOADER, events_1.UI.INITIALIZE];
        this.requireDeviceMode = [events_1.UI.BOOTLOADER];
        this.useDeviceState = false;
        this.skipFirmwareCheck = true;
        const { payload } = this;
        (0, schema_utils_1.Assert)(firmwareUpdate_1.FirmwareUpdate, payload);
        if (payload.binary) {
            this.params = {
                ...this.params,
                binary: payload.binary,
            };
        }
        else {
            this.params = {
                version: payload.version,
                btcOnly: payload.btcOnly,
                baseUrl: payload.baseUrl || 'https://data.trezor.io',
                intermediaryVersion: payload.intermediaryVersion,
            };
        }
    }
    async confirmation() {
        await this.getPopupPromise().promise;
        const uiPromise = this.createUiPromise(events_1.UI.RECEIVE_CONFIRMATION);
        this.postMessage((0, events_1.createUiMessage)(events_1.UI.REQUEST_CONFIRMATION, {
            view: 'device-management',
            customConfirmButton: {
                className: 'wipe',
                label: 'Proceed',
            },
            label: 'Do you want to update firmware? Never do this without your recovery card.',
        }));
        const uiResp = await uiPromise.promise;
        return uiResp.payload;
    }
    async run() {
        var _a;
        const { device, params } = this;
        let binary;
        try {
            if (params.binary) {
                binary = params.binary;
            }
            else {
                binary = await (0, firmware_1.getBinary)({
                    features: device.features,
                    releases: (0, firmwareInfo_1.getReleases)((_a = device.features) === null || _a === void 0 ? void 0 : _a.internal_model),
                    version: params.version,
                    btcOnly: params.btcOnly,
                    baseUrl: params.baseUrl,
                    intermediaryVersion: params.intermediaryVersion,
                });
            }
        }
        catch (err) {
            throw constants_1.ERRORS.TypedError('Method_FirmwareUpdate_DownloadFailed', `Failed to download firmware binary ${err.message}`);
        }
        const stripped = (0, firmware_1.stripFwHeaders)(binary);
        await (0, firmware_1.uploadFirmware)(this.device.getCommands().typedCall.bind(this.device.getCommands()), this.postMessage, device, { payload: (0, firmware_1.shouldStripFwHeaders)(device.features) ? stripped : binary });
        return (0, firmware_1.calculateFirmwareHash)(device.features.major_version, stripped, (0, crypto_1.randomBytes)(32));
    }
}
exports.default = FirmwareUpdate;
//# sourceMappingURL=firmwareUpdate.js.map