import { Deferred } from '@trezor/utils';
import { NETWORK } from '../constants';
import { CallMethodPayload, CallMethodResponse, UiRequestButtonData, UiPromiseCreator, CoreEventMessage } from '../events';
import type { Device } from '../device/Device';
import type { FirmwareRange } from '../types';
export type Payload<M> = Extract<CallMethodPayload, {
    method: M;
}> & {
    override?: boolean;
};
export type MethodReturnType<M extends CallMethodPayload['method']> = CallMethodResponse<M>;
export declare const DEFAULT_FIRMWARE_RANGE: FirmwareRange;
export declare abstract class AbstractMethod<Name extends CallMethodPayload['method'], Params = undefined> {
    responseID: number;
    device: Device;
    params: Params;
    devicePath?: string;
    deviceState?: string;
    hasExpectedDeviceState: boolean;
    keepSession: boolean;
    skipFinalReload: boolean;
    skipFirmwareCheck: boolean;
    overridePreviousCall: boolean;
    overridden: boolean;
    name: Name;
    payload: Payload<Name>;
    get info(): string;
    useUi: boolean;
    useDevice: boolean;
    useDeviceState: boolean;
    preauthorized?: boolean;
    useEmptyPassphrase: boolean;
    allowSeedlessDevice: boolean;
    firmwareRange: FirmwareRange;
    requiredPermissions: string[];
    allowDeviceMode: string[];
    requireDeviceMode: string[];
    network: NETWORK.NetworkType;
    useCardanoDerivation: boolean;
    confirmation?(): Promise<boolean | undefined>;
    noBackupConfirmation?(allowSuppression?: boolean): Promise<boolean>;
    getButtonRequestData?(code: string): UiRequestButtonData | undefined;
    postMessage: (message: CoreEventMessage) => void;
    getPopupPromise: () => Deferred<void>;
    createUiPromise: UiPromiseCreator;
    removeUiPromise: (promise: Deferred<any>) => void;
    initAsync?(): Promise<void>;
    constructor(message: {
        id?: number;
        payload: Payload<Name>;
    });
    setDevice(device: Device): void;
    requestPermissions(): Promise<boolean>;
    private getOriginPermissions;
    checkPermissions(): void;
    savePermissions(temporary?: boolean): void;
    checkFirmwareRange(isUsingPopup?: boolean): Promise<"ui-device_firmware_old" | "ui-device_firmware_unsupported" | "ui-device_firmware_not_compatible" | "ui-device_firmware_not_installed" | undefined>;
    isManagementRestricted(): boolean | undefined;
    abstract init(): void;
    abstract run(): Promise<MethodReturnType<Name>>;
    dispose(): void;
}
//# sourceMappingURL=AbstractMethod.d.ts.map