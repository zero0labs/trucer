import { Static } from '@trezor/schema-utils';
import type { Params, Response } from '../params';
export type AuthenticateDeviceParams = Static<typeof AuthenticateDeviceParams>;
export declare const AuthenticateDeviceParams: import("@sinclair/typebox").TObject<{
    config: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TObject<{
        T2B1: import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TObject<{
            rootPubKeys: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
            caPubKeys: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
        }>, import("@sinclair/typebox").TObject<{
            debug: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{
                rootPubKeys: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
                caPubKeys: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
            }>>;
        }>]>;
    }>, import("@sinclair/typebox").TObject<{
        T1B1: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUndefined>;
        T2T1: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUndefined>;
    }>]>, import("@sinclair/typebox").TObject<{
        version: import("@sinclair/typebox").TNumber;
        timestamp: import("@sinclair/typebox").TString;
    }>]>>;
    allowDebugKeys: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TBoolean>;
}>;
export type AuthenticateDeviceResult = {
    valid: true;
    caPubKey: string;
    debugKey?: boolean;
    configExpired?: typeof undefined;
    error?: typeof undefined;
} | {
    valid: false;
    caPubKey: string;
    debugKey?: boolean;
    configExpired?: boolean;
    error: 'ROOT_PUBKEY_NOT_FOUND' | 'CA_PUBKEY_NOT_FOUND' | 'INVALID_DEVICE_MODEL' | 'INVALID_DEVICE_CERTIFICATE' | 'INVALID_DEVICE_SIGNATURE';
};
export declare function authenticateDevice(params: Params<AuthenticateDeviceParams>): Response<AuthenticateDeviceResult>;
//# sourceMappingURL=authenticateDevice.d.ts.map