import { Static } from '@trezor/schema-utils';
import type { Params, Response } from '../params';
import { PROTO } from '../../constants';
export type ChangeLanguage = Static<typeof ChangeLanguage>;
export declare const ChangeLanguage: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TObject<{
    binary: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUndefined>;
    language: import("@sinclair/typebox").TString;
    baseUrl: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
}>, import("@sinclair/typebox").TObject<{
    binary: import("@trezor/schema-utils/lib/custom-types/array-buffer").TArrayBuffer;
    language: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUndefined>;
    baseUrl: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUndefined>;
}>]>;
export declare function changeLanguage(params: Params<ChangeLanguage>): Response<PROTO.Success>;
//# sourceMappingURL=changeLanguage.d.ts.map