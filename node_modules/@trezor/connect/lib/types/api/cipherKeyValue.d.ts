import { Params, BundledParams, Response } from '../params';
import { Static } from '@trezor/schema-utils';
export type CipherKeyValue = Static<typeof CipherKeyValue>;
export declare const CipherKeyValue: import("@sinclair/typebox").TObject<{
    path: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TString, import("@sinclair/typebox").TArray<import("@sinclair/typebox").TNumber>]>;
    key: import("@sinclair/typebox").TString;
    value: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TString, import("@trezor/schema-utils/lib/custom-types/buffer").TBuffer]>;
    encrypt: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TBoolean>;
    askOnEncrypt: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TBoolean>;
    askOnDecrypt: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TBoolean>;
    iv: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TString, import("@trezor/schema-utils/lib/custom-types/buffer").TBuffer]>>;
}>;
export interface CipheredValue {
    value: string;
}
export declare function cipherKeyValue(params: Params<CipherKeyValue>): Response<CipheredValue>;
export declare function cipherKeyValue(params: BundledParams<CipherKeyValue>): Response<CipheredValue[]>;
//# sourceMappingURL=cipherKeyValue.d.ts.map