import { Static } from '@trezor/schema-utils';
import type { Params, Response } from '../params';
export type FirmwareUpdate = Static<typeof FirmwareUpdate>;
export declare const FirmwareUpdate: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TObject<{
    binary: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUndefined>;
    version: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TNumber>;
    btcOnly: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TBoolean>;
    baseUrl: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    intermediaryVersion: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TLiteral<1>, import("@sinclair/typebox").TLiteral<2>, import("@sinclair/typebox").TLiteral<3>]>>;
}>, import("@sinclair/typebox").TObject<{
    binary: import("@trezor/schema-utils/lib/custom-types/array-buffer").TArrayBuffer;
}>]>;
export interface FirmwareUpdateResponse {
    hash: string;
    challenge: string;
}
export declare function firmwareUpdate(params: Params<FirmwareUpdate>): Response<FirmwareUpdateResponse>;
//# sourceMappingURL=firmwareUpdate.d.ts.map