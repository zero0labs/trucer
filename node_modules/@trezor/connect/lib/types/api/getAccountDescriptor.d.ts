import { Static } from '@trezor/schema-utils';
import { PROTO } from '../../constants';
import { Params, BundledParams, Response } from '../params';
export type GetAccountDescriptorParams = Static<typeof GetAccountDescriptorParams>;
export declare const GetAccountDescriptorParams: import("@sinclair/typebox").TObject<{
    path: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TString, import("@sinclair/typebox").TArray<import("@sinclair/typebox").TNumber>]>;
    coin: import("@sinclair/typebox").TString;
    derivationType: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TEnum<typeof PROTO.CardanoDerivationType>>;
    suppressBackupWarning: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TBoolean>;
}>;
export interface GetAccountDescriptorResponse {
    descriptor: string;
    path: string;
    legacyXpub?: string;
}
export declare function getAccountDescriptor(params: Params<GetAccountDescriptorParams>): Response<GetAccountDescriptorResponse>;
export declare function getAccountDescriptor(params: BundledParams<GetAccountDescriptorParams>): Response<(GetAccountDescriptorResponse | null)[]>;
//# sourceMappingURL=getAccountDescriptor.d.ts.map