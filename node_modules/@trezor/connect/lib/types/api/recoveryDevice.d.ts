import { Static } from '@trezor/schema-utils';
import { PROTO } from '../../constants';
import type { Params, Response } from '../params';
export type RecoveryDevice = Static<typeof RecoveryDevice>;
export declare const RecoveryDevice: import("@sinclair/typebox").TObject<{
    language: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    label: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    type: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TEnum<typeof PROTO.RecoveryDeviceType>>;
    pin_protection: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TBoolean>;
    passphrase_protection: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TBoolean>;
    word_count: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TNumber, import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TLiteral<12>, import("@sinclair/typebox").TLiteral<18>, import("@sinclair/typebox").TLiteral<24>]>]>>;
    enforce_wordlist: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TBoolean>;
    u2f_counter: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TNumber>;
    dry_run: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TBoolean>;
}>;
export declare function recoveryDevice(params: Params<RecoveryDevice>): Response<PROTO.Success>;
//# sourceMappingURL=recoveryDevice.d.ts.map