import { JavaScriptTypeBuilder, TUnion, Hint, SchemaOptions, TLiteral, TEnum, TEnumKey, TEnumValue } from '@sinclair/typebox';
type UnionToIntersection<U> = (U extends unknown ? (arg: U) => 0 : never) extends (arg: infer I) => 0 ? I : never;
type LastInUnion<U> = UnionToIntersection<U extends unknown ? (x: U) => 0 : never> extends (x: infer L) => 0 ? L : never;
type ObjectKeysToTuple<T, Last = LastInUnion<keyof T>> = [T] extends [never] ? [] : [Last] extends [never] ? [] : Last extends string | number ? [...ObjectKeysToTuple<Omit<T, Last>>, TLiteral<Last>] : [];
export interface TKeyOfEnum<T extends Record<string, string | number>> extends TUnion<ObjectKeysToTuple<T>> {
    [Hint]: 'KeyOfEnum';
}
export declare class KeyofEnumBuilder extends JavaScriptTypeBuilder {
    KeyOfEnum<T extends Record<string, string | number>>(schema: T, options?: SchemaOptions): TKeyOfEnum<T>;
    Enum<V extends TEnumValue, T extends Record<TEnumKey, V>>(schema: T, options?: SchemaOptions): TEnum<T>;
}
export {};
//# sourceMappingURL=keyof-enum.d.ts.map