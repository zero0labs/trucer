/// <reference types="w3c-web-usb" />
/// <reference types="node" />
import { AbstractApi, AbstractApiConstructorParams } from './abstract';
import { AsyncResultWithTypedError } from '../types';
import * as ERRORS from '../errors';
interface ConstructorParams extends AbstractApiConstructorParams {
    usbInterface: USB;
}
interface TransportInterfaceDevice {
    session?: null | string;
    path: string;
    device: USBDevice;
}
export declare class UsbApi extends AbstractApi {
    devices: TransportInterfaceDevice[];
    usbInterface: ConstructorParams['usbInterface'];
    constructor({ usbInterface, logger }: ConstructorParams);
    enumerate(): Promise<{
        success: false;
        error: never;
        message: string | undefined;
    } | {
        success: false;
        error: "unexpected error";
        message: string;
    } | import("../types").Success<string[]>>;
    read(path: string): AsyncResultWithTypedError<ArrayBuffer, typeof ERRORS.DEVICE_NOT_FOUND | typeof ERRORS.INTERFACE_UNABLE_TO_OPEN_DEVICE | typeof ERRORS.INTERFACE_DATA_TRANSFER | typeof ERRORS.DEVICE_DISCONNECTED_DURING_ACTION | typeof ERRORS.UNEXPECTED_ERROR>;
    write(path: string, buffer: Buffer): Promise<import("../types").Success<undefined> | {
        success: false;
        error: "device disconnected during action";
        message: string | undefined;
    } | {
        success: false;
        error: "device not found";
        message: string | undefined;
    } | {
        success: false;
        error: "A transfer error has occurred.";
        message: string | undefined;
    }>;
    openDevice(path: string, first: boolean): Promise<import("../types").Success<undefined> | {
        success: false;
        error: "device not found";
        message: string | undefined;
    } | {
        success: false;
        error: "Unable to open device";
        message: string | undefined;
    }>;
    openInternal(path: string, first: boolean): Promise<import("../types").Success<undefined> | {
        success: false;
        error: "device not found";
        message: string | undefined;
    } | {
        success: false;
        error: "Unable to open device";
        message: string | undefined;
    }>;
    closeDevice(path: string): Promise<import("../types").Success<undefined> | {
        success: false;
        error: "device not found";
        message: string | undefined;
    } | {
        success: false;
        error: "Unable to close device";
        message: string | undefined;
    }>;
    private findDevice;
    private createDevices;
    private deviceIsHid;
    private filterDevices;
}
export {};
//# sourceMappingURL=usb.d.ts.map