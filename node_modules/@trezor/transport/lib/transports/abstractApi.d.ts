import { Deferred } from '@trezor/utils';
import { AbstractTransport, AbstractTransportParams, AbstractTransportMethodParams } from './abstract';
import { AbstractApi } from '../api/abstract';
import { SessionsClient } from '../sessions/client';
interface ConstructorParams extends AbstractTransportParams {
    api: AbstractApi;
    sessionsClient: (typeof SessionsClient)['prototype'];
}
export declare abstract class AbstractApiTransport extends AbstractTransport {
    private sessionsClient;
    private api;
    protected acquirePromise?: Deferred<void>;
    constructor({ messages, api, sessionsClient, signal, logger }: ConstructorParams);
    init(): {
        promise: Promise<import("../types").Success<undefined> | {
            success: false;
            error: NonNullable<"Aborted by signal" | "Aborted by timeout">;
            message: string | undefined;
        } | {
            success: false;
            error: "unexpected error";
            message: string;
        } | {
            success: false;
            error: never;
            message: string | undefined;
        } | {
            success: false;
            error: "unexpected error";
            message: string;
        }>;
        abort: () => void;
    };
    listen(): import("../types").Success<undefined> | {
        success: false;
        error: "already listening";
        message: string | undefined;
    };
    enumerate(): {
        promise: Promise<{
            success: false;
            error: "unexpected error";
        } | {
            success: false;
            error: "Aborted by signal";
        } | {
            success: false;
            error: "Aborted by timeout";
        } | {
            success: false;
            error: NonNullable<"Aborted by signal" | "Aborted by timeout">;
            message: string | undefined;
        } | {
            success: false;
            error: "unexpected error";
            message: string;
        } | import("../types").Success<import("..").Descriptor[]>>;
        abort: () => void;
    };
    acquire({ input }: AbstractTransportMethodParams<'acquire'>): {
        promise: Promise<import("../types").ResultWithTypedError<string, "Unable to open device" | "device not found" | "wrong previous session" | "device disconnected during action" | "unexpected error" | "Aborted by signal" | "Aborted by timeout"> | {
            success: false;
            error: NonNullable<"Aborted by signal" | "Aborted by timeout">;
            message: string | undefined;
        } | {
            success: false;
            error: "unexpected error";
            message: string;
        }>;
        abort: () => void;
    };
    release({ path, session, onClose }: AbstractTransportMethodParams<'release'>): {
        promise: Promise<import("../types").Success<undefined> | {
            success: false;
            error: NonNullable<"Aborted by signal" | "Aborted by timeout">;
            message: string | undefined;
        } | {
            success: false;
            error: "unexpected error";
            message: string;
        } | {
            success: false;
            error: "session not found";
            message: string | undefined;
        }>;
        abort: () => void;
    };
    call({ session, name, data, protocol }: AbstractTransportMethodParams<'call'>): {
        promise: Promise<{
            success: false;
            error: NonNullable<"Aborted by signal" | "Aborted by timeout">;
            message: string | undefined;
        } | {
            success: false;
            error: "unexpected error";
            message: string;
        } | import("../types").Success<{
            message: {
                [key: string]: any;
            };
            type: keyof import("@trezor/protobuf/lib/messages").MessageType;
        }> | {
            success: false;
            error: "unexpected error";
            message: string | undefined;
        } | {
            success: false;
            error: NonNullable<"Unable to open device" | "A transfer error has occurred." | "device not found" | "device disconnected during action">;
            message: string | undefined;
        }>;
        abort: () => void;
    };
    send({ data, session, name, protocol }: AbstractTransportMethodParams<'send'>): {
        promise: Promise<import("../types").Success<undefined> | {
            success: false;
            error: "device disconnected during action";
            message: string | undefined;
        } | {
            success: false;
            error: NonNullable<"Aborted by signal" | "Aborted by timeout">;
            message: string | undefined;
        } | {
            success: false;
            error: "unexpected error";
            message: string;
        } | {
            success: false;
            error: "session not found";
            message: string | undefined;
        } | {
            success: false;
            error: "unexpected error";
            message: string;
        }>;
        abort: () => void;
    };
    receive({ session, protocol }: AbstractTransportMethodParams<'receive'>): {
        promise: Promise<{
            success: false;
            error: "device disconnected during action";
            message: string | undefined;
        } | {
            success: false;
            error: NonNullable<"Aborted by signal" | "Aborted by timeout">;
            message: string | undefined;
        } | {
            success: false;
            error: "unexpected error";
            message: string;
        } | {
            success: false;
            error: "session not found";
            message: string | undefined;
        } | {
            success: false;
            error: "unexpected error";
            message: string;
        } | import("../types").Success<{
            message: {
                [key: string]: any;
            };
            type: keyof import("@trezor/protobuf/lib/messages").MessageType;
        }>>;
        abort: () => void;
    };
    releaseDevice(path: string): import("../types").AsyncResultWithTypedError<undefined, "Unable to close device" | "device not found" | "unexpected error">;
    stop(): void;
}
export {};
//# sourceMappingURL=abstractApi.d.ts.map