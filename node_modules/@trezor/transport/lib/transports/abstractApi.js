"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractApiTransport = void 0;
const tslib_1 = require("tslib");
const utils_1 = require("@trezor/utils");
const protocol_1 = require("@trezor/protocol");
const abstract_1 = require("./abstract");
const send_1 = require("../utils/send");
const receive_1 = require("../utils/receive");
const ERRORS = tslib_1.__importStar(require("../errors"));
class AbstractApiTransport extends abstract_1.AbstractTransport {
    constructor({ messages, api, sessionsClient, signal, logger }) {
        super({ messages, signal, logger });
        this.sessionsClient = sessionsClient;
        this.api = api;
    }
    init() {
        return this.scheduleAction(() => tslib_1.__awaiter(this, void 0, void 0, function* () {
            const handshakeRes = yield this.sessionsClient.handshake();
            return handshakeRes.success
                ? this.success(undefined)
                : this.unknownError('handshake error', []);
        }));
    }
    listen() {
        if (this.listening) {
            return this.error({ error: ERRORS.ALREADY_LISTENING });
        }
        this.listening = true;
        this.api.on('transport-interface-change', devices => {
            this.sessionsClient.enumerateDone({
                paths: devices,
            });
        });
        this.sessionsClient.on('descriptors', (descriptors) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            if ((_a = this.acquirePromise) === null || _a === void 0 ? void 0 : _a.promise) {
                yield this.acquirePromise.promise;
            }
            this.handleDescriptorsChange(descriptors);
        }));
        return this.success(undefined);
    }
    enumerate() {
        return this.scheduleAction(() => tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.sessionsClient.enumerateIntent();
            const enumerateResult = yield this.api.enumerate();
            if (!enumerateResult.success) {
                return enumerateResult;
            }
            const occupiedPaths = enumerateResult.payload;
            const enumerateDoneResponse = yield this.sessionsClient.enumerateDone({
                paths: occupiedPaths,
            });
            return this.success(enumerateDoneResponse.payload.descriptors);
        }));
    }
    acquire({ input }) {
        return this.scheduleAction(() => tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { path } = input;
            if (this.listening) {
                this.listenPromise[path] = (0, utils_1.createDeferred)();
            }
            this.acquirePromise = (0, utils_1.createDeferred)();
            const acquireIntentResponse = yield this.sessionsClient.acquireIntent(input);
            if (this.acquirePromise) {
                this.acquirePromise.resolve(undefined);
            }
            if (!acquireIntentResponse.success) {
                return this.error({ error: acquireIntentResponse.error });
            }
            this.acquiredUnconfirmed[path] = acquireIntentResponse.payload.session;
            const reset = !!input.previous;
            const openDeviceResult = yield this.api.openDevice(path, reset);
            if (!openDeviceResult.success) {
                if (this.listenPromise) {
                    this.listenPromise[path].resolve(openDeviceResult);
                }
                return openDeviceResult;
            }
            this.sessionsClient.acquireDone({ path });
            if (!this.listenPromise[path]) {
                return this.success(acquireIntentResponse.payload.session);
            }
            return this.listenPromise[path].promise.finally(() => {
                delete this.listenPromise[path];
            });
        }), undefined, [ERRORS.DEVICE_DISCONNECTED_DURING_ACTION, ERRORS.SESSION_WRONG_PREVIOUS]);
    }
    release({ path, session, onClose }) {
        return this.scheduleAction(() => tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (this.listening) {
                this.releasingSession = session;
                this.listenPromise[path] = (0, utils_1.createDeferred)();
            }
            const releaseIntentResponse = yield this.sessionsClient.releaseIntent({
                session,
            });
            if (!releaseIntentResponse.success) {
                return this.error({ error: releaseIntentResponse.error });
            }
            const releasePromise = this.releaseDevice(releaseIntentResponse.payload.path);
            if (onClose)
                return this.success(undefined);
            yield releasePromise;
            yield this.sessionsClient.releaseDone({
                path: releaseIntentResponse.payload.path,
            });
            if (!this.listenPromise[path]) {
                return this.success(undefined);
            }
            return this.listenPromise[path].promise
                .then(() => this.success(undefined))
                .finally(() => {
                delete this.listenPromise[path];
            });
        }));
    }
    call({ session, name, data, protocol }) {
        return this.scheduleAction(() => tslib_1.__awaiter(this, void 0, void 0, function* () {
            const getPathBySessionResponse = yield this.sessionsClient.getPathBySession({
                session,
            });
            if (!getPathBySessionResponse.success) {
                if (getPathBySessionResponse.error === 'session not found') {
                    return this.error({ error: ERRORS.DEVICE_DISCONNECTED_DURING_ACTION });
                }
                return this.error({ error: ERRORS.UNEXPECTED_ERROR });
            }
            const { path } = getPathBySessionResponse.payload;
            try {
                const { encode, decode } = protocol || protocol_1.v1;
                const buffers = (0, send_1.buildBuffers)(this.messages, name, data, encode);
                for (let i = 0; i < buffers.length; i++) {
                    const chunk = buffers[i];
                    yield this.api.write(path, chunk).then(result => {
                        if (!result.success) {
                            throw new Error(result.error);
                        }
                    });
                }
                const message = yield (0, receive_1.receiveAndParse)(this.messages, () => this.api.read(path).then(result => {
                    if (result.success) {
                        return result.payload;
                    }
                    throw new Error(result.error);
                }), decode);
                return this.success(message);
            }
            catch (err) {
                if (err.message === ERRORS.DEVICE_DISCONNECTED_DURING_ACTION) {
                    this.enumerate();
                }
                return this.unknownError(err, [
                    ERRORS.DEVICE_DISCONNECTED_DURING_ACTION,
                    ERRORS.DEVICE_NOT_FOUND,
                    ERRORS.INTERFACE_UNABLE_TO_OPEN_DEVICE,
                    ERRORS.INTERFACE_DATA_TRANSFER,
                ]);
            }
        }), { timeout: undefined });
    }
    send({ data, session, name, protocol }) {
        return this.scheduleAction(() => tslib_1.__awaiter(this, void 0, void 0, function* () {
            const getPathBySessionResponse = yield this.sessionsClient.getPathBySession({
                session,
            });
            if (!getPathBySessionResponse.success) {
                return this.error({ error: getPathBySessionResponse.error });
            }
            const { path } = getPathBySessionResponse.payload;
            try {
                const { encode } = protocol || protocol_1.v1;
                const buffers = (0, send_1.buildBuffers)(this.messages, name, data, encode);
                for (let i = 0; i < buffers.length; i++) {
                    const chunk = buffers[i];
                    yield this.api.write(path, chunk).then(result => {
                        if (!result.success) {
                            throw new Error(result.error);
                        }
                    });
                }
                return this.success(undefined);
            }
            catch (err) {
                if (err.message === ERRORS.DEVICE_DISCONNECTED_DURING_ACTION) {
                    this.enumerate();
                }
                return this.unknownError(err, [ERRORS.DEVICE_DISCONNECTED_DURING_ACTION]);
            }
        }));
    }
    receive({ session, protocol }) {
        return this.scheduleAction(() => tslib_1.__awaiter(this, void 0, void 0, function* () {
            const getPathBySessionResponse = yield this.sessionsClient.getPathBySession({
                session,
            });
            if (!getPathBySessionResponse.success) {
                return this.error({ error: getPathBySessionResponse.error });
            }
            const { path } = getPathBySessionResponse.payload;
            try {
                const { decode } = protocol || protocol_1.v1;
                const message = yield (0, receive_1.receiveAndParse)(this.messages, () => this.api.read(path).then(result => {
                    if (!result.success) {
                        throw new Error(result.error);
                    }
                    return result.payload;
                }), decode);
                return this.success(message);
            }
            catch (err) {
                if (err.message === ERRORS.DEVICE_DISCONNECTED_DURING_ACTION) {
                    this.enumerate();
                }
                return this.unknownError(err, [ERRORS.DEVICE_DISCONNECTED_DURING_ACTION]);
            }
        }));
    }
    releaseDevice(path) {
        return this.api.closeDevice(path);
    }
    stop() {
        this.api.on('transport-interface-change', () => {
            this.logger.debug('device connected after transport stopped');
        });
        this.stopped = true;
        this.abortController.abort();
    }
}
exports.AbstractApiTransport = AbstractApiTransport;
//# sourceMappingURL=abstractApi.js.map